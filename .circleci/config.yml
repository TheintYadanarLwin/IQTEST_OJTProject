version: 2.1
orbs:
  node: circleci/node@1.1.6 # orb version
jobs:

 test:
    docker:
      - image: circleci/php:7.3-fpm-alpine
        environment:
          APP_DEBUG: true
          APP_ENV: testing
          APP_KEY: base64:u532onaEb/BzuM3BgU9D/A==
          DB_DATABASE: iqtest
          DB_USERNAME: root
      - image: circleci/mysql:5.7-ram
        environment:
          MYSQL_DATABASE: iqtest
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_HOST: '%'
   working_directory: ~/iqtest
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "api/composer.lock" }}
            - v1-dependencies-
      - run: composer install -n
      - save_cache:
          paths:
            - ./api/vendor
          key: v1-dependencies-{{ checksum "api/composer.lock" }}
      - run:
          name: Prepare db
          command: |
            php artisan migrate
            php artisan db:seed
      - run:
          name: phpunit
          command: |
            php ./vendor/bin/phpunit

 build_frontend:
    executor: build-executor
    steps:
      - checkout
      - install-docker-compose
      - run:
          name: Rename env file
          command: |
            case "$CIRCLE_BRANCH" in
              master)
                mv client/.env.prd client/.env
                ;;
             
            esac
      - run:
          name: build spa
          command: |
            docker-compose run --rm node sh -c 'yarn install && yarn generate'
      - run:
          name: copy images
          command: |
            sudo cp -r client/assets client/dist/_nuxt
      - persist_to_workspace:
          root: ~/iqtest
          paths: client/dist
      - slack/status:
          fail_only: true
          webhook: '${SLACK_WEBHOOK}'
  
  build_and_push:
    docker:
      - image: docker:18.06.1-ce-git
        environment:
          DOCKER_IMAGE: project_app
          APP: iqtest
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.06.0-ce
          docker_layer_caching: true
      - run:
          name: Install requirements
          command: |
            apk add --no-cache py-pip bash
            pip install docker-compose==1.17.1 awscli
      - run:
          name: docker-compose pull
          command: docker-compose pull
           - run:
          name: docker-compose build
          command: |
            docker-compose -f docker-compose.yml build app
            docker-compose -f docker-compose.yml build web
      - run:
          name: push builds
          shell: /bin/bash
          command: |
            set -e
            eval $(aws --region ap-northeast-1 ecr get-login --no-include-email)
            export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --output text | awk '{print $1}')
            export SHA1=$(echo ${CIRCLE_SHA1} | cut -c1-7)
            docker images
            docker tag $DOCKER_IMAGE:latest $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-1.amazonaws.com/$APP:$SHA1
            docker tag $DOCKER_IMAGE:latest $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-1.amazonaws.com/$APP:$CIRCLE_BRANCH
            time docker push $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-1.amazonaws.com/$APP:$SHA1
            time docker push $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-1.amazonaws.com/$APP:$CIRCLE_BRANCH
            - slack/status:
          fail_only: true
          webhook: '${SLACK_WEBHOOK}'
 
  deploy_backend:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Install deploy tools
          command: |
            sudo pip install awsebcli==3.14.6
            wget http://bit.ly/eb_deploy_and_notify_sh -O ~/eb_deploy_and_notify.sh
            chmod +x ~/eb_deploy_and_notify.sh
      - run:
          name: Deploy!!
          shell: /bin/bash
          command: |
            set -e
            eb --version
            export EB_ENV=`eb list | grep '*' | awk '{print $2}'`
            export SHA1=$(echo ${CIRCLE_SHA1} | cut -c1-7)
            echo "${CIRCLE_BRANCH}" ; echo "${EB_ENV}" ; echo  "${SHA1}"
            cd api
            sed -i -e "s/changeme/$SHA1/" Dockerrun.aws.json
            git add Dockerrun.aws.json
            git rm Dockerfile
            ~/eb_deploy_and_notify.sh ${EB_ENV} --staged
          no_output_timeout: 15m
      - slack/status:
          fail_only: true
          webhook: '${SLACK_WEBHOOK}'

            deploy_frontend:
    executor: deploy-executor
    environment:
      DOMAIN: iqtest-ojt.jp
    steps:
      - attach_workspace:
          at: ~/iqtest
      - install-deploy-scripts
      - deploy:
          name: deploy frontend
          shell: /bin/bash
          environment:
            REGION: ap-northeast-1
          command: |
            set -e
            cd client/dist/
            pwd && ls -alh
            shopt -s extglob
            case "$CIRCLE_BRANCH" in
              master)
                export S3=www.$DOMAIN
                ;;
            esac
            echo "Syncing to s3.."
            ~/s3_sync_and_notify.sh $S3
      - slack/status:
          fail_only: true
          webhook: '${SLACK_WEBHOOK}'

executors:
  build-executor:
    machine:
      docker_layer_caching: true
      image: ubuntu-2204:2022.04.1
    working_directory: ~/iqtest
  deploy-executor:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/iqtest

commands:
  install-deploy-scripts:
    steps:
      - run:
          name: install deploy scripts
          command: |
            sudo pip install pyrsistent==0.16.1 awscli awsebcli==3.19.1 botocore==1.17
            wget http://bit.ly/eb_deploy_and_notify_sh -O ~/eb_deploy_and_notify.sh
            wget http://bit.ly/s3_sync_and_notify_sh -O ~/s3_sync_and_notify.sh
            chmod +x ~/*.sh
  install-docker-compose:
    steps:
      - run:
          name: Install Docker Compose
          command: |
            pip install docker-compose==1.23.2
  pip-upgrade:
    steps:
      - run:
          name: pip upgrade
          command: |
            pip install --upgrade pip

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      # - test
      - build_frontend:
          # requires:
          #   - test
          filters:
            branches:
              only:
                - master
                
      - build_and_push:
          # requires:
          #   - test
          filters:
            branches:
              only:
                - master
      - deploy_backend:
          requires:
            - build_and_push
          filters:
            branches:
              only:
                - master
      - deploy_frontend:
          requires:
            - build_frontend
            - deploy_backend
          filters:
            branches:
              only:
                - master
               
